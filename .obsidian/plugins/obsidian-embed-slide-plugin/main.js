/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.app.workspace.onLayoutReady(() => {
      this.registerMarkdownPostProcessor(markdownPostProcessor);
    });
  }
  onunload() {
  }
};
var markdownPostProcessor = (el, ctx) => {
  var _a, _b;
  for (const p of el.querySelectorAll("p")) {
    if (((_a = p.textContent) == null ? void 0 : _a.startsWith("<<<")) && ((_b = p.textContent) == null ? void 0 : _b.endsWith(">>>"))) {
      window.setTimeout(() => {
        const imgs = p == null ? void 0 : p.querySelectorAll("img, svg");
        if (imgs && imgs.length > 0) {
          p.parentElement.replaceChild(buildHtml(imgs), p);
        }
      }, 200);
    }
  }
};
var buildHtml = (imgs) => {
  const wrapper = document.createElement("div");
  wrapper.className = "embed-slide-wrapper";
  wrapper.dataset.total = imgs.length + "";
  wrapper.dataset.cur = "0";
  const content = document.createElement("div");
  content.className = "embed-slide-content";
  for (const img of imgs) {
    img.classList.add("embed-slide-img");
    content.appendChild(img);
  }
  const controller = document.createElement("div");
  controller.className = "embed-slide-controller";
  controller.innerHTML = `<svg
	class="embed-slide-controller-prev"
	height="24"
	viewBox="0 0 24 24"
	width="24"
	xmlns="http://www.w3.org/2000/svg"
	onclick="var wrapper = event.target?.closest('.embed-slide-wrapper');if(wrapper){var total = Number(wrapper.dataset.total);var cur = Number(wrapper.dataset.cur);var imgs = wrapper.querySelectorAll('.embed-slide-img');imgs[cur].dataset.hidden = 'true';cur = (cur - 1 + total) % total;wrapper.dataset.cur = cur;imgs[cur].dataset.hidden = 'false';wrapper.querySelector('.embed-slide-controller-num').innerText = cur + 1 + ' / ' + total;}"
>
	<path
		d="m18 18-8.5-6 8.5-6zm-10-12v12h-2v-12z"
		fill="currentColor"
	></path>
</svg>
<span class="embed-slide-controller-num">1 / ${imgs.length}</span>
<svg
	class="embed-slide-controller-next"
	height="24"
	viewBox="0 0 24 24"
	width="24"
	xmlns="http://www.w3.org/2000/svg"
	onclick="var wrapper = event.target?.closest('.embed-slide-wrapper');if(wrapper){var total = Number(wrapper.dataset.total);var cur = Number(wrapper.dataset.cur);var imgs = wrapper.querySelectorAll('.embed-slide-img');imgs[cur].dataset.hidden = 'true';cur = (cur + 1 + total) % total;wrapper.dataset.cur = cur;imgs[cur].dataset.hidden = 'false';wrapper.querySelector('.embed-slide-controller-num').innerText = cur + 1 + ' / ' + total;}"
>
	<path
		d="m6 18 8.5-6-8.5-6zm10-12v12h2v-12z"
		fill="currentColor"
	></path>
</svg>`;
  wrapper.appendChild(content);
  wrapper.appendChild(controller);
  return wrapper;
};
